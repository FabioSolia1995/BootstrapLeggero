/*   BootstrapLeggero (Alpha 0.1) : Light Bootstrap Generator
 * 
 * 	 Copyright (C) 2018 Fabio Solia <solia.fabio@hotmail.it>
 * 	
 *	 This file is part of BootstrapLeggero.
 *
 *   BootstrapLeggero is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   BootstrapLeggero is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with BootstrapLeggero.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class ElaborateBootstrapCSSFile {

	//Function that split the code of web page
	public ArrayList<String> SplitFile(String line,String [] lineArray) {
		ArrayList<String> listArray = new ArrayList<String>();
		//Replace all characters for split the HTML file
		line = line.replace(" ","\n");
		line = line.replace("<", "");
		line = line.replace("class=\"", ">class>");
		line = line.replace("\"", "\n|stopline|>");
		line = line.replace(">>",">");
		line = line.replaceAll(">", "\n");
		//Check to see if the file has a double carriage return and replaces it with just one
		if(line.contains("\n\n")) {
			while(line.contains("\n\n")) {
				line = line.replace("\n\n", "\n");
			}
		}
		lineArray = line.split("\n");
		//Takes all the values ​​contained in the class attribute until it reaches the word |stopline|
		for(int i=0;i<lineArray.length;i++) {
			if(lineArray[i].contains("class")) {
				i++;
				while(!lineArray[i].contains("|stopline|")){
					listArray.add(lineArray[i]);
					i++;
				}
			}
		}
		return listArray;
	}

	//Read the bootstrap CSS file 
	public String ReadBootstrapCSSFile(String txtBootstrap, ArrayList<String> listArray) throws FileNotFoundException {
		String BootstrapCSSline="";
		ArrayList<String> TempArray = new ArrayList<String>();
		int j = 0;

		//Takes the file as input
		java.io.File file = new File(txtBootstrap);

		//Scan the file
		@SuppressWarnings("resource")
		Scanner input = new Scanner(file);
		
		//Start the action to get the main instructions of the Bootstrap CSS file to generate the new lightened file
		BootstrapCSSline = "/* This file is autogenerated by BootstrapLeggero program. For more information see http://www.bootstrapleggero.altervista.org .*/\n";
		while(input.hasNext()){
			if(j < 542) {
				BootstrapCSSline = BootstrapCSSline + input.nextLine() + "\n";
			}
			else {
				TempArray.add(input.nextLine() + "\n");
			}
			j++;
		}
		for(int i=0;i<listArray.size();i++) {
			for(int f=0;f<TempArray.size();f++) {
				//Takes all media on CSS file
				if(TempArray.get(f).contains("@media")) {
					while(!(TempArray.get(f).contains("}") && TempArray.get(f+1).contains("}"))) {
						BootstrapCSSline = BootstrapCSSline + TempArray.get(f);
						TempArray.remove(f);
					}
					BootstrapCSSline = BootstrapCSSline + "}\n}\n";
				}
				//Takes all word that contain @ on CSS file
				else if(TempArray.get(f).contains("@")) {
					while(!(TempArray.get(f).contains("}") && TempArray.get(f+1).contains("}"))) {
						BootstrapCSSline = BootstrapCSSline + TempArray.get(f);
						TempArray.remove(f);
					}
					BootstrapCSSline = BootstrapCSSline + "}\n}\n";
				}
				//Takes all the selectors contained in the class attribute of the HTML page
				else if((TempArray.get(f).contains(listArray.get(i)) && TempArray.get(f).contains("{")) || (TempArray.get(f).contains(listArray.get(i)) && TempArray.get(f).contains(",") && !TempArray.get(f).contains(";"))) {
					//If the previous line contains the character, the program returns to the empty bootstrap file line
					if(TempArray.get(f-1).contains(",")) {
						while(!TempArray.get(f).equals("\n") ) {
							f--;
						}
						f++;
					}
					//Add carriage return
					BootstrapCSSline = BootstrapCSSline + "\n";
					//Finish adding line when the character of the line is }
					while(!TempArray.get(f).contains("}")) {
						BootstrapCSSline = BootstrapCSSline + TempArray.get(f);
						TempArray.remove(f);
					}
					TempArray.remove(f);
					//Add the character } and carriage return
					BootstrapCSSline = BootstrapCSSline + "}\n";
				}
			}
		}
		return BootstrapCSSline;
	}

	//Function that processes the page code to return the versions of the lightened code of the bootstrap files
	//For more information see https://stackoverflow.com/questions/2885173/how-do-i-create-a-file-and-write-to-it-in-java
	public <string> void writing(String line, String filename) {
		BufferedWriter output = null;
		try {
			File file = new File(filename);
			output = new BufferedWriter(new FileWriter(file));
			output.write(line);
		} catch ( IOException e ) {
			e.printStackTrace();
		} finally {
			if ( output != null ) {
				try {
					output.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
}
